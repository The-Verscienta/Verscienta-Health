// Prisma schema for Better-Auth
// See https://www.better-auth.com/docs/adapters/prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better-Auth User Model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  firstName     String?
  lastName      String?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Additional fields for HIPAA compliance
  deletedAt              DateTime?
  scheduledForDeletion   DateTime?

  // MFA fields
  twoFactorSecret  String?
  backupCodes      String? // JSON array of hashed backup codes

  // Better-Auth Relations
  accounts     Account[]
  sessions     Session[]
  deviceTokens DeviceToken[]

  // Performance Indexes
  @@index([role]) // For admin/role-based queries
  @@index([emailVerified]) // For filtering verified users
  @@index([createdAt]) // For sorting users by registration date
  @@index([deletedAt]) // For HIPAA compliance queries
  @@index([scheduledForDeletion]) // For automated deletion jobs
}

// Better-Auth Account Model (for OAuth and credentials)
model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  // Performance Indexes
  @@index([userId]) // For user account lookups (foreign key)
  @@index([providerId]) // For filtering by OAuth provider
  @@index([createdAt]) // For account history queries
}

// Better-Auth Session Model
model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([userId]) // For user session lookups (foreign key)
  @@index([expiresAt]) // For cleanup jobs (expired session removal)
  @@index([ipAddress]) // For security monitoring (detect suspicious IPs)
  @@index([createdAt]) // For session history and analytics
  @@index([userId, expiresAt]) // Composite: active sessions per user
  @@index([userId, createdAt]) // Composite: user session timeline
}

// Better-Auth Verification Model (for email verification and magic links)
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  // Performance Indexes
  @@index([expiresAt]) // For cleanup jobs (expired verification removal)
  @@index([identifier]) // For looking up verifications by email/identifier
  @@index([createdAt]) // For verification history and analytics
}

// Device Token Model (for push notifications on mobile apps)
model DeviceToken {
  id        String   @id @default(cuid())
  userId    String?  // Optional - can register before login
  token     String   @unique // FCM token (Android) or APNs token (iOS)
  platform  String   // "ios" or "android"
  deviceId  String?  // Optional unique device identifier
  appVersion String? // App version for targeted notifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform])
}
