// Prisma schema for Better-Auth
// See https://www.better-auth.com/docs/adapters/prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better-Auth User Model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  firstName     String?
  lastName      String?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Additional fields for HIPAA compliance
  deletedAt              DateTime?
  scheduledForDeletion   DateTime?

  // MFA fields
  twoFactorSecret  String?
  backupCodes      String? // JSON array of hashed backup codes

  // Better-Auth Relations
  accounts     Account[]
  sessions     Session[]
  deviceTokens DeviceToken[]
  passwordHistory PasswordHistory[]

  // Performance Indexes
  @@index([role]) // For admin/role-based queries
  @@index([emailVerified]) // For filtering verified users
  @@index([createdAt]) // For sorting users by registration date
  @@index([deletedAt]) // For HIPAA compliance queries
  @@index([scheduledForDeletion]) // For automated deletion jobs
}

// Better-Auth Account Model (for OAuth and credentials)
model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  // Performance Indexes
  @@index([userId]) // For user account lookups (foreign key)
  @@index([providerId]) // For filtering by OAuth provider
  @@index([createdAt]) // For account history queries
}

// Better-Auth Session Model
model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([userId]) // For user session lookups (foreign key)
  @@index([expiresAt]) // For cleanup jobs (expired session removal)
  @@index([ipAddress]) // For security monitoring (detect suspicious IPs)
  @@index([createdAt]) // For session history and analytics
  @@index([userId, expiresAt]) // Composite: active sessions per user
  @@index([userId, createdAt]) // Composite: user session timeline
}

// Better-Auth Verification Model (for email verification and magic links)
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  // Performance Indexes
  @@index([expiresAt]) // For cleanup jobs (expired verification removal)
  @@index([identifier]) // For looking up verifications by email/identifier
  @@index([createdAt]) // For verification history and analytics
}

// Device Token Model (for push notifications on mobile apps)
model DeviceToken {
  id        String   @id @default(cuid())
  userId    String?  // Optional - can register before login
  token     String   @unique // FCM token (Android) or APNs token (iOS)
  platform  String   // "ios" or "android"
  deviceId  String?  // Optional unique device identifier
  appVersion String? // App version for targeted notifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform])
}

// API Request Log Model (HIPAA Compliance & Security Monitoring)
// Comprehensive logging of all API requests for audit trail, analytics, and security
model ApiRequestLog {
  id            String   @id @default(cuid())

  // Request Information
  method        String   // GET, POST, PUT, DELETE, PATCH
  path          String   // /api/herbs/ginseng
  query         String?  // Serialized query parameters
  statusCode    Int      // HTTP response status (200, 404, 500, etc.)

  // Performance Metrics
  responseTime  Int      // Response time in milliseconds

  // User & Authentication
  userId        String?  // Authenticated user ID (null for public requests)
  sessionId     String?  // Session ID for tracking user sessions

  // Network & Security
  ipAddress     String?  // Client IP address
  userAgent     String?  // Browser/client user agent
  referer       String?  // HTTP referer header

  // Rate Limiting & Security
  rateLimitHit      Boolean  @default(false) // Whether rate limit was triggered
  rateLimitKey      String?  // Rate limit key (user ID or IP)
  rateLimitRemaining Int?     // Remaining requests in window

  // Error Tracking
  errorMessage  String?  // Error message if request failed
  errorStack    String?  // Stack trace for debugging (sanitized)

  // Timestamps
  createdAt     DateTime @default(now())

  // Performance Indexes for common queries
  @@index([userId])           // Query logs by user
  @@index([path])             // Query logs by endpoint
  @@index([method])           // Query logs by HTTP method
  @@index([statusCode])       // Query failed requests (4xx, 5xx)
  @@index([createdAt])        // Query logs by date (for cleanup)
  @@index([rateLimitHit])     // Query rate limit violations
  @@index([ipAddress])        // Query logs by IP (security monitoring)
  @@index([userId, createdAt]) // Composite: user activity timeline
  @@index([path, method])     // Composite: endpoint-specific analytics
  @@index([statusCode, createdAt]) // Composite: error trend analysis
}

// Password History Model (HIPAA Compliance - Password Reuse Prevention)
// Stores hashed passwords to prevent users from reusing recent passwords
model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String   // bcrypt hash of the password

  // Timestamps
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance Indexes
  @@index([userId])               // For user password history lookups
  @@index([createdAt])            // For cleanup jobs (old password removal)
  @@index([userId, createdAt])    // Composite: user password history ordered by date
}
